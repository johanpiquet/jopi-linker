************************************************************************************************************ Outils JOPI

jopi init: initialise le projet
jopi run : exécute le projet (bun ou node: défini dans la config)           <-- !!!!
jopi features list : liste les features dispo
jopi features add : ajoute une feature
jopi find uid : trouve l'emplacement de l'élément ayant cet uid
jopi uid : génère un uid

jopi install uid : installe un élément dont l'uid est celui indiqué.
                   Va utiliser les fichiers: jopi.uid.sources.json et jopi.uid.replace.json

*********************************************************************************************************** Les dossiers

jopi.uid.sources.json    > Indique quels fournisseurs utiliser pour trouver les composants
jopi.uid.replace.json   > Permet de remplacer un UID par un autre.

/gen                            > Le code généré. Bindé sur @/
/gen/ui.block/uidA.ts
/gen/ui.block/aliasName.ts

/src/moduleA/@define/ui.block/uid/index.ts
/src/moduleA/@alias/ui.block/uid

/src                                        > Le code source.
/src/@features
/src/moduleA                                 > Un module activé      (si underscore = désactivé)

/src/moduleA/@composites
/src/moduleA/@events
/src/moduleA/@listeners
/src/moduleA/@routes

/src/moduleA/uiInit.ts
/src/moduleA/serverInit.ts

******************************************************************************************************* Dossier @defines

Permet de définir des éléments.
    Format: @defines/type/uid/index.ts

    Exemple: @define/ui.block/92e64017-7d75-4b14-a1b1-6561e5e31946/info.json
            --> Va engendrer la création du dossier:
                /gen/ui.block/92e64017-7d75-4b14-a1b1-6561e5e31946  pointant sur l'original.
                Et référencé via: @/ui.block/92e64017-7d75-4b14-a1b1-6561e5e31946

******************************************************************************************************* Dossier @replace

- Le dossier "replace" permet de remplacer des ui par d'autres.

    /@replace/ui.block/uidA/uidB/priority                                        < fichier ou dossier (pour priority)
        --> Fait que le fichier /gen/ui.block/uidA/index.ts
            va pointer va       /@defines/ui.bloc/uidB/index.tsx

        + doit remplacer les alias pointant sur uidA


**************************************************************************************************** Dossier @composites

Les composites sont des tableaux générés en assemblant plusieurs éléments afin de former un tableau.
Ils donnent lieu à une génération de fichiers dont le contenu est ainsi:

    import E1 from "@/uid/uidA"
    import E2 from "@/uid/uidA"
    export default [E1, E2];

- Le dossier /@composites permet de créer un composite.

        /@composites/ui.block/uid/                               < L'uid du composite à créer
                    1_OptionalName/refId.uid            < L'unique intérêt de 1_OptinalName est le tri alphabétique
                                 /priority


        /@composites/@patch/                               < Permet de patcher une règle de composite.
            /compositeUid/uidInserted/patch.json            < Va indiquer sa nouvelle priorité
                                                                ou s'il faut le retirer
                                                                ou le remplacer par un autre uid


***************************************************************************************** Dossiers @events et @listeners

Le dossier @events permet de définir un événement, et le dossier @listeners permet d'écouter cet évenement.

/@events/uid
        info.json       < Va indiquer un titre.
        type.ts         < Format: export interface TYPE { ... }

/@listeners/eventUid/
        /1_listenerA/index.tsx


************************************************************************************** Dossier racine @features (racine)

Ce dossier permet d'activer/désactiver des fonctionnalités.

    /@features
        /README.md                          < explique ce que c'est
        /tailwind
            /README.md                      < documentation
            /config.json
            /binding
                pointA.ts                  <- si "pointA" est référencé, alors prend le default de ce fichier.
        /jsonWebToken
            /key.txt                        <- la clé de cryptage.
        /userStore
            /users.json                     <- si présent, utilise automatiquement un store json.


******************************************************************************************************** Dossier @routes

Ce dossier permet d'indiquer des routes pour des urls

/@routes/ecommerce/product/[productName]/listing
                                            /index.tsx
                                            /onPost.tsx
                                            /onDelete.tsx
                                            /cacheRules.json


